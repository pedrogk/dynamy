package dynamy.services.pool

import dynamy.services.transactions._
import java.sql.{Array => SQLArray, _}
import javax.sql._
import javax.sql._
import java.io._
import java.util._
import java.util.concurrent._
import java.util.concurrent.locks._
import java.util.logging._

case class XAConnectionWrapper(conn: XAConnection) extends Connection {
  val plainConn = conn.getConnection

  override def abort(executor: Executor) =
    plainConn.abort(executor)

  override def clearWarnings() = 
    plainConn.clearWarnings()

  override def close() = 
    plainConn.close()

  override def commit() = 
    plainConn.commit()

  override def createArrayOf(typeName: String, elements: Array[Object]) = 
    plainConn.createArrayOf(typeName, elements)

  override def createBlob() =
    plainConn.createBlob()

  override def createClob() = 
    plainConn.createClob()

  override def createNClob() =
    plainConn.createNClob()

  override def createSQLXML() =
    plainConn.createSQLXML()

  override def createStatement() = 
    plainConn.createStatement()

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int) =
    plainConn.createStatement(resultSetType, resultSetConcurrency)

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
    plainConn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)

  override def createStruct(typeName: String, attributes: Array[Object]) =
    plainConn.createStruct(typeName, attributes)

  override def getAutoCommit() =
    plainConn.getAutoCommit()

  override def getCatalog() =
    plainConn.getCatalog()

  override def getClientInfo() = 
    plainConn.getClientInfo()

  override def getClientInfo(property: String) = 
    plainConn.getClientInfo(property)

  override def getHoldability() =
    plainConn.getHoldability()

  override def getMetaData() = 
    plainConn.getMetaData()

  override def getTransactionIsolation() =
    plainConn.getTransactionIsolation()

  override def getTypeMap() =
    plainConn.getTypeMap()

  override def getWarnings() =
    plainConn.getWarnings()

  override def isClosed() =
    plainConn.isClosed()

  override def isReadOnly() =
    plainConn.isReadOnly()
  
  override def isValid(timeout: Int) =
    plainConn.isValid(timeout)
  
  override def nativeSQL(sql: String) =
    plainConn.nativeSQL(sql)
  
  override def prepareCall(sql: String) =
    plainConn.prepareCall(sql)

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int) =
    plainConn.prepareCall(sql, resultSetType, resultSetConcurrency)
  
  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
    plainConn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  override def prepareStatement(sql: String) =
    plainConn.prepareStatement(sql)
  
  override def prepareStatement(sql: String, autoGeneratedKeys: Int) =
    plainConn.prepareStatement(sql, autoGeneratedKeys)
  
  override def prepareStatement(sql: String, columnIndexes: Array[Int]) =
    plainConn.prepareStatement(sql, columnIndexes)

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int) =
    plainConn.prepareStatement(sql, resultSetType, resultSetConcurrency)
  
  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
    plainConn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability: Int)

  override def prepareStatement(sql: String, columnNames: Array[String]) =
    plainConn.prepareStatement(sql, columnNames)
  
  override def releaseSavepoint(savepoint: Savepoint) =
    plainConn.releaseSavepoint(savepoint)

  override def rollback() =
    plainConn.rollback()
  
  override def rollback(savepoint: Savepoint) =
    plainConn.rollback(savepoint)
  
  override def setAutoCommit(autoCommit: Boolean) =
    plainConn.setAutoCommit(autoCommit)
  
  override def setCatalog(catalog: String) =
    plainConn.setCatalog(catalog)
  
  override def setClientInfo(properties: Properties) =
    plainConn.setClientInfo(properties)
  
  override def setClientInfo(name: String, value: String) =
    plainConn.setClientInfo(name,value)
  
  override def setHoldability(holdability: Int) =
    plainConn.setHoldability(holdability)
  
  override def setReadOnly(readOnly: Boolean) =
    plainConn.setReadOnly(readOnly)
  
  override def setSavepoint() =
    plainConn.setSavepoint()
  
  override def setSavepoint(name: String) =
    plainConn.setSavepoint(name)
  
  override def setTransactionIsolation(level: Int) =
    plainConn.setTransactionIsolation(level)
  
  override def setTypeMap(map: Map[String, Class[_]]) =
    plainConn.setTypeMap(map)

  override def isWrapperFor(iface: Class[_]) = 
    plainConn.isWrapperFor(iface)

  override def unwrap[T](iface: Class[T]): T = null.asInstanceOf[T]

  override def setNetworkTimeout(executor: Executor, milliseconds: Int) =
    plainConn.setNetworkTimeout(executor, milliseconds)

  override def getNetworkTimeout() =
    plainConn.getNetworkTimeout()

  override def getSchema() =
    plainConn.getSchema()

  override def setSchema(schema: String) =
    plainConn.setSchema(schema)
  
  

}

class XADataSourceWrapper(ds: XADataSource) extends DataSource {

  override def getConnection() = XAConnectionWrapper(ds.getXAConnection())

  override def getConnection(username: String, password: String) = 
    XAConnectionWrapper(ds.getXAConnection(username, password))

  override def getLoginTimeout() = ds.getLoginTimeout()

  override def getLogWriter() = ds.getLogWriter()

  override def setLoginTimeout(seconds: Int) = ds.setLoginTimeout(seconds)

  override def setLogWriter(out: PrintWriter) = ds.setLogWriter(out)

  override def getParentLogger() = ds.getParentLogger()

  override def isWrapperFor(iface: Class[_]) = false

  override def unwrap[T](iface: Class[T]): T = null.asInstanceOf[T]

}
